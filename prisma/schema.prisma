// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Winner {
  white
  black
  draw
}

enum EndReason {
  resignation
  timeout
  checkmate
  draw
}

enum Color {
  white
  black
}

enum PreGameColor {
  white
  black
  random
}

enum GameState {
  notStarted
  ongoing
  finished
}

model PreGame {
  id        String   @id @default(cuid()) @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startingFen String @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1") // <-- starting position

  whiteBaseTimeSeconds  Int
  whiteIncrementSeconds Int
  blackBaseTimeSeconds  Int
  blackIncrementSeconds Int

  gameCreatorColor PreGameColor
  isRated          Boolean
  isInviteOnly     Boolean

  hasResolved Boolean @default(false)

  preGameCreatorId  String
  preGameOpponentId String?

  preGameCreator  User  @relation(fields: [preGameCreatorId], references: [id], name: "creator")
  preGameOpponent User? @relation(fields: [preGameOpponentId], references: [id], name: "opponent")
}

model ChessGame {
  id           String   @id @default(cuid()) @unique
  createdAt    DateTime @default(now())
  startingFen  String
  fen          String
  movesHistory Json

  whiteBaseTimeSeconds  Int
  whiteIncrementSeconds Int
  blackBaseTimeSeconds  Int
  blackIncrementSeconds Int

  whiteRemainingMillis Int?
  whiteEndTimeMillis   Int?
  blackRemainingMillis Int?
  blackEndTimeMillis   Int?

  gameCreatorColor Color
  state            GameState
  isRated          Boolean
  isInviteOnly     Boolean
  drawOfferedBy    Color?
  result           Result?

  gameCreatorId String
  opponentId    String

  gameCreator User @relation(fields: [gameCreatorId], references: [id], name: "creator")
  opponent    User @relation(fields: [opponentId], references: [id], name: "opponent")
}

model Result {
  id          String    @id @default(cuid())
  chessgameId String    @unique
  chessgame   ChessGame @relation(fields: [chessgameId], references: [id])
  winner      Winner
  endReason   EndReason
  endDateTime DateTime
}

model User {
  id            String       @id @default(cuid())
  username      String?       @unique
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  country       CountryCode?
  createdAt     DateTime     @default(now())

  accounts Account[]
  sessions Session[]

  gamesAsCreator     ChessGame[] @relation("creator")
  gamesAsOpponent    ChessGame[] @relation("opponent")
  preGamesAsCreator  PreGame[]   @relation("creator")
  preGamesAsOpponent PreGame[]   @relation("opponent")

  isAdmin   Boolean @default(false)
  isBanned  Boolean @default(false)
  isPremium Boolean @default(false)
  isOnline  Boolean @default(false)

  bulletRating    Int @default(1500)
  blitzRating     Int @default(1500)
  rapidRating     Int @default(1500)
  classicalRating Int @default(1500)
  fideTitle       FideTitle?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum FideTitle {
  grandmaster
  internationaMaster
  fideMaster
  candidateMaster
}

enum CountryCode {
  AFG
  ALA
  ALB
  DZA
  ASM
  AND
  AGO
  AIA
  ATA
  ATG
  ARG
  ARM
  ABW
  AUS
  AUT
  AZE
  BHS
  BHR
  BGD
  BRB
  BLR
  BEL
  BLZ
  BEN
  BMU
  BTN
  BOL
  BES
  BIH
  BWA
  BVT
  BRA
  IOT
  BRN
  BGR
  BFA
  BDI
  CPV
  KHM
  CMR
  CAN
  CYM
  CAF
  TCD
  CHL
  CHN
  CXR
  CCK
  COL
  COM
  COG
  COD
  COK
  CRI
  CIV
  HRV
  CUB
  CUW
  CYP
  CZE
  DNK
  DJI
  DMA
  DOM
  ECU
  EGY
  SLV
  GNQ
  ERI
  EST
  SWZ
  ETH
  FLK
  FRO
  FJI
  FIN
  FRA
  GUF
  PYF
  ATF
  GAB
  GMB
  GEO
  DEU
  GHA
  GIB
  GRC
  GRL
  GRD
  GLP
  GUM
  GTM
  GGY
  GIN
  GNB
  GUY
  HTI
  HMD
  VAT
  HND
  HKG
  HUN
  ISL
  IND
  IDN
  IRN
  IRQ
  IRL
  IMN
  ISR
  ITA
  JAM
  JPN
  JEY
  JOR
  KAZ
  KEN
  KIR
  PRK
  KOR
  KWT
  KGZ
  LAO
  LVA
  LBN
  LSO
  LBR
  LBY
  LIE
  LTU
  LUX
}
