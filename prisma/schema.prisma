// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

model Question {
  id        String   @id @default(cuid())
  body      String   @db.Text
  createdAt DateTime @default(now())
}

enum Winner {
  white
  black
  draw
}

enum Cause {
  resignation
  timeout
  checkmate
  draw
}

enum Color {
  white
  black
}

enum GameState {
  notStarted
  ongoing
  finished
}

model PreGame {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fen String @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1") // <-- starting position

  initialTimeSeconds Int
  incrementSeconds   Int

  rated      Boolean
  inviteOnly Boolean

  resolved Boolean @default(false)

  gameCreatorColor  Color?
  preGameCreatorId  String
  preGameOpponentId String?

  preGameCreator  User  @relation(fields: [preGameCreatorId], references: [id], name: "creator")
  preGameOpponent User? @relation(fields: [preGameOpponentId], references: [id], name: "opponent")
}

model ChessGame {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  fen       String   @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1") // <-- starting position

  initialTimeSeconds Int
  incrementSeconds   Int

  whiteRemainingMillis Int
  whiteEndTimestamp    DateTime @db.DateTime(3)
  blackRemainingMillis Int
  blackEndTimestamp    DateTime @db.DateTime(3)

  gameCreatorColor Color
  state            GameState
  rated            Boolean
  inviteOnly       Boolean
  result           Result?

  gameCreatorId String
  opponentId    String

  gameCreator User @relation(fields: [gameCreatorId], references: [id], name: "creator")
  opponent    User @relation(fields: [opponentId], references: [id], name: "opponent")
}

model Result {
  id          String    @id @default(cuid())
  chessgameId String    @unique
  chessgame   ChessGame @relation(fields: [chessgameId], references: [id])
  winner      Winner
  cause       Cause
  finishedAt  DateTime
}

model User {
  id                 String      @id @default(cuid())
  name               String?
  email              String?     @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  createdAt          DateTime    @default(now())
  gamesAsCreator     ChessGame[] @relation("creator")
  gamesAsOpponent    ChessGame[] @relation("opponent")
  preGamesAsCreator  PreGame[]   @relation("creator")
  preGamesAsOpponent PreGame[]   @relation("opponent")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
